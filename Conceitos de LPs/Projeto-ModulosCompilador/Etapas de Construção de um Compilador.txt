ETAPA 1: Codificação do programa numa linguagem alto nível, como C.
Testar em: https://www.ideone.com setando a linguagem: C

//Programa que soma 2 números e imprime o resultado na saída padrão (tela)
#include <stdio.h>

int main() {
	int num1 = 3;
	int num2 = 5;
	//resultado da soma
	int resultado = num1 + num2;
	printf("Resultado: %d", resultado);
	return 0;
}

------------------------------------
ETAPA 2: Fomatador remove comentários, espaços e quebras de linhas excedentes.

#include<stdio.h>int main(){int num1=3;int num2=5;int resultado=num1+num2;printf("Resultado: %d",resultado);return 0;}

------------------------------------
ETAPA 3: Análise Léxica. Tokenização.

$PRE_PROC$		#include
$ABR_COL_ANG$	<
$BIBLIO$		stdio.h
$FEC_COL_ANG$	>
$TIPO_INT$		int
$ESP$				
$IDENT$			main
$ABR_PAR$		(
$FEC_PAR$		)
$ABR_CHA$		{
$TIPO_INT$		int
$ESP$	
$IDENT$			num1
$ATRIB$			=
$NUM_INT$		3
$FIN_INST$		;
$TIPO_INT$		int
$ESP$		
$IDENT$			num2
$ATRIB$			=
$NUM_INT$		5
$FIN_INST$		;
$TIPO_INT$		int
$ESP$			
$IDENT$			resultado
$ATRIB$			=
$IDENT$			num1
$OPE_ARI_SOM$	+
$IDENT$			num2
$FIN_INST$		;
$INST_IMP$		printf
$ABR_PAR$		(
$TEXTO$			"Resultado: %d"
$SEP_VIR$		,
$IDENT$			resultado
$FEC_PAR$		)
$FIN_INST$		;
$RET_FUNC$		return
$ESP$
$NUM_INT$		0
$FIN_INST$		;
$FEC_CHA$		}

------------------------------------
ETAPA 4: Análise Sintática (Confrontrar a ordem dos tokens perante a gramática de linguagem)

Testar em: https://bnfplayground.pauliankline.com

$PRE_PROC$$ABR_COL_ANG$$BIBLIO$$FEC_COL_ANG$$TIPO_INT$$ESP$$IDENT$$ABR_PAR$$FEC_PAR$$ABR_CHA$$TIPO_INT$$ESP$$IDENT$$ATRIB$$NUM_INT$$FIN_INST$$TIPO_INT$$ESP$$IDENT$$ATRIB$$NUM_INT$$FIN_INST$$TIPO_INT$$ESP$$IDENT$$ATRIB$$IDENT$$OPE_ARI_SOM$$IDENT$$FIN_INST$$IDENT$$ABR_PAR$$TEXTO$$SEP_VIR$$IDENT$$FEC_PAR$$FIN_INST$$RET_FUNC$$ESP$$NUM_INT$$FIN_INST$$FEC_CHA$

/*REGRAS SINTÁTICAS*/
<programa> ::= ( <preprocessador> )* ( <definicao_funcao> )+
<preprocessador> ::= <inclusao> <abre_colche_ang> <biblioteca> <fecha_colche_ang>
<definicao_funcao> ::= <especificador_tipo> <espaco> <identificador> <abre_parentese> <lista_parametros> <fecha_parentese> <abre_chave> <lista_comandos> <fecha_chave>
<especificador_tipo> ::= <tipo_int> | <tipo_void> | <tipo_float>                       
<lista_parametros> ::= E | <parametro> ( <separador> <parametro> )*
<parametro> ::= <especificador_tipo> <espaco> <identificador> 
<lista_comandos> ::= ( <comando> )*
<comando>  ::= <comando_declaracao_atribuicao> | <comando_chamada_funcao> | <comando_retorno>
<comando_declaracao_atribuicao> ::= ( <especificador_tipo> <espaco> )? <identificador> <atribuicao> <expressao> <fim_instrucao>
<expressao>      ::= <termo> ( ( <soma> | <subtracao> ) <termo> )*
<termo>          ::= <fator> ( ( <multiplicacao> | <divisao> ) <fator> )*
<fator>          ::= <numero> | <identificador>
<comando_chamada_funcao> ::= <identificador> <abre_parentese> ( <lista_argumentos> )? <fecha_parentese> <fim_instrucao>
<lista_argumentos> ::= <argumento> ( <separador> <argumento> )*
<argumento> ::= <expressao> | <texto>
<comando_retorno> ::= <instrucao_retorno> <espaco> ( <numero_inteiro> | <identificador> ) <fim_instrucao>
<numero> ::=  <numero_inteiro> | <numero_real>
/*TOKENS*/
<inclusao> ::= "$PRE_PROC$"
<biblioteca> ::= "$BIBLIO$"
<abre_colche_ang> ::= "$ABR_COL_ANG$"
<fecha_colche_ang> ::= "$FEC_COL_ANG$"
<abre_parentese> ::= "$ABR_PAR$"
<fecha_parentese> ::= "$FEC_PAR$"
<abre_chave> ::= "$ABR_CHA$"
<fecha_chave> ::= "$FEC_CHA$"
<identificador>  ::= "$IDENT$"
<tipo_int> ::= "$TIPO_INT$"
<tipo_float> ::= "$TIPO_FLOAT$"
<tipo_void> ::= "$TIPO_VOID$"
<espaco>	::= "$ESP$"
<separador> ::= "$SEP_VIR$"
<atribuicao> ::= "$ATRIB$"
<fim_instrucao> ::= "$FIN_INST$"
<instrucao_impressao> ::= "$INST_IMP$"
<instrucao_retorno> ::= "$RET_FUNC$"
<soma> ::= "$OPE_ARI_SOM$"
<subtracao> ::= "$OPE_ARI_SUB$"
<multiplicacao> ::= "$OPE_ARI_MUL$"
<divisao> ::= "$OPE_ARI_DIV$"
<numero_inteiro> ::= "$NUM_INT$"
<numero_real> ::= "$NUM_REA$"
<texto> ::= "$TEXTO$"

------------------------------------
ETAPA 5: Análise Semântica estática (Acrescentar atributos a gramática - Gramática de Atributos)
	Para este exemplo, verificar se o valor do dado corresponde ao tipo.
	Para este exemplo, verificar se as variaveis foram declaradas antes do uso.
	Para este exemplo, verificar se as variaveis estão sendo usadas dentro do seu escopo.
	
------------------------------------
ETAPA 6: Código Assembly correspondente
Testar em: https://www.ideone.com setando a linguagem: Assembler 64bit

section .data
    result_str db 'Resultado: ', 0    ; String de resultado
    num1 dq 3                         ; Primeira variável (3)
    num2 dq 5                         ; Segunda variável (5)
 
section .bss
    resultado resb 4                  ; Buffer para armazenar o resultado
 
section .text
    global _start
 
_start:
    ; Carregando os valores de num1 e num2 em registradores
    mov rax, [num1]                   ; Carrega o valor de num1 em rax
    add rax, [num2]                   ; Soma o valor de num2 a rax, rax agora contém a soma
 
    ; Convertendo o resultado em string
    mov rbx, resultado                ; Aponta para o buffer
    mov rcx, rax                      ; Copia o resultado para rcx
    call int_to_string                ; Converte o número em string
 
    ; Escrevendo "Resultado: " na tela
    mov rax, 1                        ; Chamada do sistema para write (sys_write)
    mov rdi, 1                        ; File descriptor (1 = stdout)
    mov rsi, result_str               ; String "Resultado: "
    mov rdx, 11                       ; Tamanho da string (11 bytes)
    syscall                           ; Faz a chamada do sistema
 
    ; Escrevendo o resultado da soma na tela
    mov rax, 1                        ; Chamada do sistema para write (sys_write)
    mov rdi, 1                        ; File descriptor (1 = stdout)
    mov rsi, resultado                ; Buffer com o resultado
    mov rdx, 4                        ; Tamanho da string
    syscall                           ; Faz a chamada do sistema
 
    ; Saída do programa
    mov rax, 60                       ; Chamada do sistema para exit (sys_exit)
    xor rdi, rdi                      ; Código de saída 0
    syscall                           ; Faz a chamada do sistema
 
; Subrotina para converter número em string (apenas para números pequenos)
int_to_string:
    add rcx, '0'                      ; Converte o número para o código ASCII
    mov [rbx], cl                     ; Armazena o número convertido no buffer
    mov byte [rbx + 1], 0             ; Termina a string com null
    ret
